# This is a basic workflow to help you get started with Actions

name: build new rule-set

on:
  workflow_dispatch:
  schedule:
    - cron: "0 23 * * *"


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Set date
        run: |
          echo "TZ=Asia/Shanghai" >> $GITHUB_ENV
        #ensure rulesets with proxy groups gets ip/domain rule-sets
      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "Apple=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple.yaml" >> $GITHUB_ENV
          echo "Bahamut=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Bahamut.yaml" >> $GITHUB_ENV
          echo "BilibiliHMT=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/BilibiliHMT.yaml" >> $GITHUB_ENV
          echo "DMM=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/DMM/DMM.yaml" >> $GITHUB_ENV
          echo "Ehentai=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/EHGallery/EHGallery.yaml" >> $GITHUB_ENV
          echo "Tiktok=https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/StreamingMedia/Video/TikTok.yaml" >> $GITHUB_ENV
          echo "Telegram=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml" >> $GITHUB_ENV
          echo "EPIC=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.yaml" >> $GITHUB_ENV
          echo "Steam=https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/Extra/Game/Steam.yaml" >> $GITHUB_ENV
          echo "SteamCN=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.yaml" >> $GITHUB_ENV
          echo "Microsoft=https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Microsoft.yaml" >> $GITHUB_ENV
          echo "Github=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml" >> $GITHUB_ENV
          echo "Rockstar=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Rockstar/Rockstar.yaml" >> $GITHUB_ENV
          echo "China=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China_Classical.yaml" >> $GITHUB_ENV
        shell: bash

       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: check-out
        uses: actions/checkout@v3
       
       # generate domain.yaml,
      - name: Generate Apple_domain.yaml file
        run: |
          curl -sSL ${Apple} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Apple_domain.yaml

      - name: Generate bahamut_domain.yaml file
        run: |
          curl -sSL ${Bahamut} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Bahamut_domain.yaml
          
      - name: Generate BilibiliHMT_domain.yaml file
        run: |
          curl -sSL ${BilibiliHMT} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> BilibiliHMT_domain.yaml
          
      - name: Generate DMM_domain.yaml file
        run: |
          curl -sSL ${DMM} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> DMM_domain.yaml
          
      - name: Generate Ehentai_domain.yaml file
        run: |
          curl -sSL ${Ehentai} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Ehentai_domain.yaml
          
      - name: Generate Tiktok_domain.yaml file
        run: |
          curl -sSL ${Tiktok} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Tiktok_domain.yaml
          
      - name: Generate Telegram_domain.yaml file
        run: |
          curl -sSL ${Telegram} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Telegram_domain.yaml
          
      - name: Generate EPIC_domain.yaml file
        run: |
          curl -sSL ${EPIC} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> EPIC_domain.yaml
          
      - name: Generate Steam_domain.yaml file
        run: |
          curl -sSL ${Steam} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Steam_domain.yaml
          
      - name: Generate SteamCN_domain.yaml file
        run: |
          curl -sSL ${SteamCN} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> SteamCN_domain.yaml
          
      - name: Generate Microsoft_domain.yaml file
        run: |
          curl -sSL ${Microsoft} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Microsoft_domain.yaml
          
      - name: Generate Github_domain.yaml file
        run: |
          curl -sSL ${Github} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Github_domain.yaml
          
      - name: Generate Rockstar_domain.yaml file
        run: |
          curl -sSL ${Rockstar} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> Rockstar_domain.yaml
          
      - name: Generate China_domain.yaml file
        run: |
          curl -sSL ${China} | grep -v -E "*(IP-CIDR|PROCESS-NAME|USER-AGENT)" >> China_domain.yaml
          

       # generate ip.txt
      - name: Generate Apple_ip.txt file
        run: |
          curl -sSL ${Apple} | grep -v -E "*(DOMAIN|PROCESS-NAME|USER-AGENT)" >> Apple_ip.yaml
          
      - name: Generate BilibiliHMT_ip.txt file
        run: |
          curl -sSL ${BilibiliHMT} | grep -v -E "*(DOMAIN|PROCESS-NAME|USER-AGENT)" >> BilibiliHMT_ip.yaml
          
      - name: Generate DMM_ip.txt file
        run: |
          curl -sSL ${DMM} | grep -v -E "*(DOMAIN|PROCESS-NAME|USER-AGENT)" >> DMM_ip.yaml
          
      - name: Generate Ehentai_ip.txt file
        run: |
          curl -sSL ${Ehentai} | grep -v -E "*(DOMAIN|PROCESS-NAME|USER-AGENT)" >> Ehentai_ip.yaml
          
      - name: Generate Telegram_ip.txt file
        run: |
          curl -sSL ${Telegram} | grep -v -E "*(DOMAIN|PROCESS-NAME|USER-AGENT)" >> Telegram_ip.yaml

      - name: Move domain/ip files to domain directory
        run: |
          mkdir -p rule
          cd rule
          mkdir domain
          mkdir ip                
          cp *_domain.yaml ./rule/domain/  | cp *_ip.yaml ./rule/ip/

    #  - name: Release and upload assets
    #    uses: softprops/action-gh-release@v0.1.6
    #    with:
    #      name: ${{ env.RELEASE_NAME }}
    #      tag_name: ${{ env.TAG_NAME }}
    #      draft: false
    #      prerelease: false
    #      files: |
    #        ./domain/* | ./ip/*
    #    env:
    #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Git push assets to "release" branch
        run: |
          cd  rule || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release

    #  - name: Git push ip assets to "release" branch
    #    run: |
    #      cd ip || exit 1
    #      git init
    #      git config --local user.name "github-actions[bot]"
    #      git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
    #      git checkout -b release
    #      git add ip/
    #      git commit -m "${{ env.RELEASE_NAME }}"
    #      git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
    #      git push -f origin release
